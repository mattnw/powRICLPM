[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Jeroen D. Mulder Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Mulder2022.html","id":"preliminary-analysis","dir":"Articles","previous_headings":"","what":"Preliminary analysis","title":"Results Mulder (2022)","text":"First, Monte Carlo power analysis performed 171 experimental conditions using limited number replications (reps = 100). preliminary results serve basis selecting experimental conditions show promising results (.e., meet desired power- accuracy levels). conditions validated using large number replications (reps = 2000) next step. R-code preliminary analysis can found :","code":"# Matrix of standardized lagged effects Phi <- matrix(c(0.20, 0.10, 0.15, 0.30), byrow = FALSE, ncol = 2)  # Correlation matrix of within-components wSigma <- matrix(c(1, 0.26, 0.26, 1), byrow = FALSE, ncol = 2)  # powRICLPM automatically computes Psi based on Phi and wSigma  # Setup parallel processing to speed up computations plan(multisession, workers = 6)  # Perform preliminary power analysis (with progress bar) with_progress({   out_preliminary <- powRICLPM(target_power = 0.8,                                search_lower = 200,                                search_upper = 2000,                                search_step = 100,                                time_points = c(3, 4, 5),                                ICC = c(0.50, 0.55, 0.60),                                RI_cor = 0.35,                                 Phi = Phi,                                wSigma = wSigma,                                reps = 100,                                 seed = 20220209) })  # Tabular summary of results summary(out_preliminary) coef_wB2wA1 <- coef_powRICLPM(out_preliminary, parameter = \"wB2~wA1\") coef_wB2wA1 # Can be used to check if any issues occurred with estimation   # Visualize power p <- plot_powRICLPM(out_preliminary,                     \"sample_size\",                     \"pwr\",                     color = \"factor(time_points)\",                     wrap = \"ICC\",                     parameter = \"wB2~wA1\")  # Tailor visualization for Mulder (2022) p <- p +    labs(color = \"Number of time points\") +   scale_x_continuous(name = \"Sample size\",                      breaks = seq(200, 2000, 200),                      guide = guide_axis(n.dodge = 2)) +   theme(legend.position = \"bottom\") p ggsave(\"Mulder2022_preliminary_power.png\", height = 5, width = 7)  # Visualize accuracy a <- plot_powRICLPM(out_preliminary,                     \"sample_size\",                     \"acc\",                     color = \"factor(time_points)\",                     wrap = \"ICC\",                      parameter = \"wB2~wA1\") a <- a +   labs(color = \"Number of time points\") +   ylab(\"Accuracy\") +   scale_x_continuous(name = \"Sample size\",                      breaks = seq(200, 2000, 200),                      guide = guide_axis(n.dodge = 2)) +   theme(legend.position = \"bottom\") a ggsave(\"Mulder2022_preliminary_accuracy.png\", height = 5, width = 7)"},{"path":"/articles/Mulder2022.html","id":"validation","dir":"Articles","previous_headings":"","what":"Validation","title":"Results Mulder (2022)","text":"preliminary results suggest three minimum sample sizes meet desired power level: 600 (conditions 4 5 times points, across proportions -unit variance), 1100 (conditions 3 repeated measures 0.50 0.55 proportion -unit variance), 1200 (conditions 3 repeated measures 0.60 proportion -unit variance). Therefore, power analysis results validated total 9 experimental conditions using reps = 1000.","code":"# Setup parallel processing to speed up computations plan(multisession, workers = 5)  # Perform preliminary power analysis (with progress bar) with_progress({   out_validation <- powRICLPM(target_power = 0.8,                               search_lower = 1200,                               search_upper = 2000,                               search_step = 100,                               time_points = c(4, 5),                               ICC = c(0.50, 0.55, 0.60),                               RI_cor = 0.35,                                Phi = Phi,                               wSigma = wSigma,                               reps = 2000,                                seed = 20220209) })  # Tabular summary of results summary(out_validation, parameter = \"wB2~wA1\") coef_wB2wA1 <- coef_powRICLPM(out_validation, parameter = \"wB2~wA1\") coef_wB2wA1  # Visualize power p2 <- plot_powRICLPM(out_validation,                     \"sample_size\",                     \"pwr\",                     color = \"factor(time_points)\",                     wrap = \"ICC\",                     parameter = \"wB2~wA1\")  # Tailor visualization of power for Mulder (2022) p2 <- p2 +    labs(color = \"Number of time points\") +   scale_x_continuous(name = \"Sample size\",                      breaks = seq(1200, 2000, 100),                      guide = guide_axis(n.dodge = 2)) +   scale_color_manual(values = c(\"#00BA38\", \"#619CFF\")) +   theme(legend.position = \"bottom\") p2 ggsave(\"Mulder2022_validation_power.png\", height = 5, width = 7)  # Visualize accuracy a2 <- plot_powRICLPM(out_validation,                     \"sample_size\",                     \"acc\",                     color = \"factor(time_points)\",                     wrap = \"ICC\",                      parameter = \"wB2~wA1\") a2 <- a2 +   labs(color = \"Number of time points\") +   scale_x_continuous(name = \"Sample size\",                      breaks = seq(1200, 2000, 100),                      guide = guide_axis(n.dodge = 2)) +   theme(legend.position = \"bottom\") a2 ggsave(\"Mulder2022_validation_accuracy.png\", height = 5, width = 7)"},{"path":"/articles/analysis.html","id":"preparation","dir":"Articles","previous_headings":"","what":"Preparation","title":"Power analysis","text":"performing power analysis, must first determine experimental conditions population parameter values. Experimental conditions (: simulation conditions) refer characteristics study design can impact statistical power. includes characteristics like sample size number repeated measures included study. must decide number repeated measures used simulations, range sample sizes simulate power. example, investigate power sample sizes 100 1000 (incremental steps 50, resulting 19 conditions) RI-CLPM 3, 4 5 repeated measures. Next, must determine population parameter values RI-CLPM. can based previous research, theory, expert knowledge. RI-CLPM requires specification : ICC: proportion variance -unit level (relative total variance). RI_cor: correlation random intercepts. Phi: Standardized autoregressive cross-lagged effects within-unit components model. wSigma: Correlations within-unit components. information decide population parameter values can found LINK NAAR PAPER. example, parameter values set :","code":"ICC <- 0.5 RI_cor <- 0.3 Phi <- matrix(c(.4, .1, .2, .3), ncol = 2, byrow = T) # The .2 refers to our standardized cross-lagged effect of interest wSigma <- matrix(c(1, .3, .3, 1), ncol = 2, byrow = T)"},{"path":"/articles/analysis.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"Power analysis","text":"perform power analysis, use powRICLPM() function. must provide: desired power level using target_power argument, range sample sizes simulate power using search_lower, search_upper, search_step arguments (alternatively, can specify directly providing vector sample sizes sample_size argument), number time points simulated data using time_points argument, population values ICC, RI_cor, Phi, wSigma, number Monte Carlo replications want perform per condition reps argument. Note larger numbers replications result reliable results, computationally intensive, especially simulating power across large range sample sizes. information speeding analysis performing computations parallel (.e., using multiple cores computer) can found https://jeroendmulder.github.io/powRICLPM/parallel.html. example, specify: Optionally, can specify: skewness kurtosis: integer (vector) determines skewness kurtosis observed variables, respectively. Suppose reason believe \\(Y\\) variables positively skewed, distribution \\(X\\) heavy tails (.e., higher kurtosis). can include arguments skewness = c(0, 0, 0, 1, 1, 1) kurtosis = c(0.5, 0.5, 0.5, 0, 0, 0), first three elements represent observed \\(X\\) variables, last three elements represent observed \\(Y\\) variables. default, arguments set 0. alpha: numeric value denoting significance criterion. defaults 0.05. seed: integer control starting point random number generator. important use want replicate results. save_path: directory (data) files written. Technical details implementation analysis can found package documentation.","code":"# This analysis will take a while... output <- powRICLPM(target_power = 0.8,                     search_lower = 100,                     search_upper = 1000,                     search_step = 50,                     time_points = c(3, 4, 5),                     ICC = ICC,                     RI_cor = RI_cor,                      Phi = Phi,                     wSigma = wSigma,                     reps = 1000)"},{"path":"/articles/analysis.html","id":"results-summary-and-performance-measures","dir":"Articles","previous_headings":"","what":"Results: Summary and performance measures","title":"Power analysis","text":"Using powRICLPM() function creates “powRICLPM” object: list results, upon can call summary() coef_powRICLPM() functions summarize extract output analysis (performance measures), respectively. summary() displays textual summary console, including characteristics powRICLPM analysis minimally recommended sample size (sample size reaches targeted power level). also suggests next steps depending number conditions meet desired power level parameter interest. Detailed results, including performance measures number estimation issues, specific parameter can obtained coef_powRICLPM providing parameter name parameter argument. returns data frame rows different experimental conditions, columns including errors: number replications ended fatal error, not_converged: number replications converge solution, inadmissible: number replications resulted inadmissible results parameters (e.g., negative variances), avg: average parameter estimate replications, stdDev: standard deviation parameter estimates across replications, SEAvg: average standard error across replications, mse: mean square error, acc: average width confidence interval, cover: coverage rate confidence interval defined significance criterion (default \\(\\alpha = .05\\)), pwr: proportion times p-value lower significance criterion.","code":"class(output) # `output` is both a \"powRICLPM\" and \"list\" object  # The `summary()` function \"detects\" that `output` is an  \"powRICLPM\" object.  # Therefore, it prints a summary specifically tailored for \"powRICLPM\" objects. summary(output)  # Get detailed parameter-specific information summary(output, parameter = \"wB2~wA1\")"},{"path":"/articles/mplus.html","id":"preparation","dir":"Articles","previous_headings":"","what":"Preparation","title":"Power analysis using Mplus","text":"performing post hoc power analysis, must carefully determine population parameter values, values impact validity power analysis. Therefore, recommended base parameter values previous research, theory, expert knowledge. Specifically, post hoc analysis function requires specification : ICC: proportion variance -unit level (relative total variance). RI_cor: correlation random intercepts. Phi: Standardized autoregressive cross-lagged effects within-unit components model. wSigma: Correlations within-unit components. Details decide values population parameter values can found LINK NAAR MIJN PAPER. example, parameter values set :","code":"ICC <- 0.5 RI_cor <- 0.3 Phi <- matrix(c(.4, .1, .2, .3), ncol = 2, byrow = T) # The .2 refers to our standardized cross-lagged effect of interest wSigma <- matrix(c(1, .3, .3, 1), ncol = 2, byrow = T)"},{"path":"/articles/mplus.html","id":"create-mplus-syntax","dir":"Articles","previous_headings":"","what":"Create Mplus syntax","title":"Power analysis using Mplus","text":"Mplus syntax, use powRICLPM_Mplus() function. must provide: sample sizes number time points sample_size time_points arguments respectively, population values ICC, RI_cor, Phi, wSigma, number MCMC replications want perform per condition reps argument, seed control starting point random number generator, save_path, denoting directory save Mplus input file . example, specify: powRICLPM_Mplus() creates Mplus input file (.txt file) writes specified directory. file contains Mplus model syntax needed run power analysis RI-CLPM Mplus. information Monte Carlo simulations Mplus can found http://statmodel.com/download/usersguide/Chapter12.pdf.","code":"powRICLPM_Mplus(sample_size = 250,                 time_points = 4,                 ICC = 0.5,                 RI_cor = 0.3,                 Phi = Phi,                 wSigma = wSigma,                 reps = 10000,                 seed = 123456,                 save_path = \"./saved\")"},{"path":"/articles/speeding.html","id":"furrr-setup","dir":"Articles","previous_headings":"","what":"furrr: Setup","title":"Speeding up the analysis","text":"default, powRICLPM power analysis run simulations across conditions sequentially. , user, power change analysis runs using plan() function furrr package. See ?plan information different implemented evaluation strategies. advice run analysis multisession, strategy works regardless operating system use. Use workers argument plan() specify many cores want use. Next, can simply run powRICLPM analysis normally , code run (example) 7 cores. can result significant reduction computing time. However, note unlikely computation time reduced factor 7, setup finish multisession code execution also takes time. end reverting back sequential execution code plan(sequential).","code":"# Load the furrr package library(furrr)  # Check how many cores are available future::availableCores()  # Plan the powRICLPM analysis to run on 1 core less than the number of available cores plan(multisession, workers = 7) # For the case of 8 available cores  # Run the powRICLPM analysis  output <- powRICLPM(sample_size = 500,                     time_points = c(3, 4, 5),                     ICC = c(0.3, 0.5, 0.7),                     RI_cor = RI_cor,                      Phi = Phi,                     wSigma = wSigma,                     reps = 1000)  # Revert back to sequential execution of code upon completion of the powRICLPM analysis plan(sequential)"},{"path":"/articles/speeding.html","id":"progressr-progress-notifications","dir":"Articles","previous_headings":"","what":"progressr: Progress notifications","title":"Speeding up the analysis","text":"can useful get approximation progress powRICLPM analysis running code, especially running analysis parallel. powRICLPM() implemented progress notifications using progressr package. Simply put, two options can get progress notification: can subscribe progress updates specific express wrapping expression with_progress({...}). can subscribe progress updates everywhere running handlers(global = T). second option fully developed yet furrr package, instead focus first. Implementing with_progress({...}) option, well parallel executing powRICLPM analysis, results code: information progress notification options using progressr end-users, including auditory email updates, see https://progressr.futureverse.org.","code":"# Load progressr package library(progressr)  # Plan the powRICLPM analysis to run on 7 cores plan(multisession, workers = 7)   # Run the powRICLPM analysis  with_progress({   output <- powRICLPM(sample_size = 500,                       time_points = c(3, 4, 5),                       ICC = c(0.3, 0.5, 0.7),                       RI_cor = RI_cor,                        Phi = Phi,                       wSigma = wSigma,                       reps = 1000) })  # Revert back to sequential execution of code upon completion of the powRICLPM analysis plan(sequential)"},{"path":"/articles/visualization.html","id":"visualization-using-plot_powriclpm","dir":"Articles","previous_headings":"","what":"Visualization using plot_powRICLPM()","title":"Visualize results","text":"plot_powRICLPM() function creates “ggplot2” scatter plot powRICLPM()-output. requires follow arguments: object: powRICLPM object, x: factor provides x coordinates plot. accepts “sample_size”, “time_points”, “ICC” input, referring sample size, number time points, proportion -unit variance, respectively. y: factor provides y coordinates plot. accepts “pwr”, “avg”, “stdDev”, “SEAvg”, “mse”, “cover”, “acc”. information values refer can found “Power analysis” vignette https://jeroendmulder.github.io/powRICLPM/analysis.html. wrap: factor based visualizations subsetted. ...: Arguments provided ... parsed mapping argument (aes()). example, can used group results according number time points passing color = \"time_points\" additional argument plot_powRICLPM(). Continuing example introduced “Power analysis” vignette https://jeroendmulder.github.io/powRICLPM/analysis.html, can visualize achieved power detect small effect interest (captured “wB2~wA1” parameter) relates sample size, using scatter plot sample size x-axis power y-axis. Therefore, specify: However, visualization distinguish conditions different number time points. Therefore, results conditions different number time points can mapped lines different colors shapes including color = \"time_points\" shape = \"time_points\" arguments. Suppose powRICLPM analysis also included varying proportions -unit variance (ICC). Visualizations can subsetted multiple plots, reflecting specific proportion -unit variance, providing factor wrap argument. functionality implemented behind scenes using facet_wrap() function ggplot2 package.","code":"# Create a scatter plot of power by sample size p1 <- plot_powRICLPM(output, x = \"sample_size\", y = \"pwr\", parameter = \"wB2~wA1\") p1 # Create a scatter plot of power by sample size and number of time points (color/shape) p2 <- plot_powRICLPM(output, x = \"sample_size\", y = \"pwr\", color = \"time_points\", parameter = \"wB2~wA1\") p2 p3 <- plot_powRICLPM(output, x = \"sample_size\", y = \"pwr\", color = \"time_points\", wrap = \"factor(ICC)\", parameter = \"wB2~wA1\") p3"},{"path":"/articles/visualization.html","id":"customizing-your-plots","dir":"Articles","previous_headings":"","what":"Customizing your plots","title":"Visualize results","text":"plot_powRICLPM() returns ggplot2 object can fully customized using ggplot2 functionality. example, can change scales, add titles, change geoms, etc. information options ggplot2 framework can found https://ggplot2-book.org/index.html. example, add title change labels x-axis:","code":"p4 <- p2 +    labs(title = \"Power analysis for RI-CLPM\",        caption = \"Based on 1000 replications.\") +   scale_x_continuous(name = \"Sample size\",                      breaks = seq(100, 1000, 100),                      guide = guide_axis(n.dodge = 2)) p4"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeroen Mulder. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mulder J (2022). powRICLPM: Power analysis random intercept cross-lagged panel model. R package version 0.2.0, http://jeroen.d.mulder.github.io/powRICLPM.","code":"@Manual{,   title = {powRICLPM: Power analysis for the random intercept cross-lagged panel model},   author = {Jeroen Mulder},   year = {2022},   note = {R package version 0.2.0},   url = {http://jeroen.d.mulder.github.io/powRICLPM}, }"},{"path":"/index.html","id":"powriclpm","dir":"","previous_headings":"","what":"Power analysis for the random intercept cross-lagged panel model","title":"Power analysis for the random intercept cross-lagged panel model","text":"powRICLPM R package performs power analysis random intercept cross-lagged panel model (RI-CLPM) simple use-friendly way. main functionalities : Perform power analysis obtain sample size recommendations (well performance measures, bias, mean square error, etc.) desired power level specific parameter. can done across multiple experimental conditions simultaneously (.e., across varying numbers repeated measures, proportions -unit variance, etc.). Summarize visualize power analysis results. Create Mplus syntax performing power analysis RI-CLPM using Mplus. User guides functionalities can found vignettes ‘Articles’ tab. Technical details implementation power analysis can found package’s functions’ documentation. rationale implemented power analysis strategy , well illustrative example extensions extensions RI-CLPM, see Mulder (forthcoming).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Power analysis for the random intercept cross-lagged panel model","text":"can install development version powRICLPM GitHub :","code":"install.packages(\"devtools\") devtools::install_github(\"jeroendmulder/powRICLPM\")"},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Power analysis for the random intercept cross-lagged panel model","text":"Every user-facing function package documented, documentation can accessed running ?function_name R console, e.g., ?powRICLPM. Furthermore, four main vignettes (accessible via ‘Articles’ tab), describing functionalities analysis options package.","code":""},{"path":"/index.html","id":"citing-powriclpm","dir":"","previous_headings":"","what":"Citing powRICLPM","title":"Power analysis for the random intercept cross-lagged panel model","text":"can cite R-package following citation: Mulder, J.D., (n.d.). Performing power analysis RI-CLPM","code":""},{"path":"/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Power analysis for the random intercept cross-lagged panel model","text":"ideas, comments, issues like raise, please get touch. Issues idea can raised GitHub via https://github.com/jeroendmulder/powRICLPM Pull request can raised GitHub via https://github.com/jeroendmulder/powRICLPM/pulls","code":""},{"path":"/reference/coef_powRICLPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Performance Measures From `powRICLPM` Object — coef_powRICLPM","title":"Performance Measures From `powRICLPM` Object — coef_powRICLPM","text":"coef_powRICLPM extracts performance measures (e.g., bias, mean square error, power) specific parameter, across experimental conditions, `powRICLPM` object.","code":""},{"path":"/reference/coef_powRICLPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performance Measures From `powRICLPM` Object — coef_powRICLPM","text":"","code":"coef_powRICLPM(object, parameter)"},{"path":"/reference/coef_powRICLPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performance Measures From `powRICLPM` Object — coef_powRICLPM","text":"object `powRICLPM` object. parameter character string denoting single variable interest. Use names_powRICLPM get overview parameter names `powRICLPM` object.","code":""},{"path":"/reference/coef_powRICLPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performance Measures From `powRICLPM` Object — coef_powRICLPM","text":"`data.frame` object columns containing performance measures, rows representing experimental conditions.","code":""},{"path":"/reference/compute_Psi.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Residual Variances of Lagged Within-Components — compute_Psi","title":"Compute Residual Variances of Lagged Within-Components — compute_Psi","text":"Within RI-CLPM context, function computes variance-covariance matrix within-unit residuals wave 2 later, given lagged effects Phi observed variance-covariance matrix Sigma.","code":""},{"path":"/reference/compute_Psi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Residual Variances of Lagged Within-Components — compute_Psi","text":"","code":"compute_Psi(Phi, wSigma)"},{"path":"/reference/compute_Psi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Residual Variances of Lagged Within-Components — compute_Psi","text":"Phi matrix standardized autoregressive cross-lagged effects population. Columns represent predictors rows represent outcomes. wSigma correlation matrix within-unit components.","code":""},{"path":"/reference/compute_Psi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Residual Variances of Lagged Within-Components — compute_Psi","text":"variance-covariance matrix within-unit residuals wave 2 later.","code":""},{"path":"/reference/compute_Psi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Residual Variances of Lagged Within-Components — compute_Psi","text":"function based Equation (3.26) Kim Nelson (1999, p. 27).","code":""},{"path":"/reference/create_lavaan.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Lavaan Model Syntax for RICLPM Power Analysis — create_lavaan","title":"Create Lavaan Model Syntax for RICLPM Power Analysis — create_lavaan","text":"Creates lavaan parameter table model syntax specified model.","code":""},{"path":"/reference/create_lavaan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Lavaan Model Syntax for RICLPM Power Analysis — create_lavaan","text":"","code":"create_lavaan(   time_points,   ICC = NULL,   RI_cor = NULL,   Phi = NULL,   wSigma = NULL,   Psi = NULL,   syntax = FALSE )"},{"path":"/reference/create_lavaan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Lavaan Model Syntax for RICLPM Power Analysis — create_lavaan","text":"time_points integer (vector) elements larger 3, indicating number time points. ICC numeric value denoting proportion variance -unit level. RI_cor numeric value denoting correlation random intercepts. Phi matrix standardized autoregressive cross-lagged effects population. Columns represent predictors rows represent outcomes. wSigma correlation matrix within-unit components. Psi Variance-covariance matrix within-unit residuals wave 2 onwards. syntax Logical indicating whether model syntax created.","code":""},{"path":"/reference/create_lavaan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Lavaan Model Syntax for RICLPM Power Analysis — create_lavaan","text":"data frame containing model parameters (parameter elements characters).","code":""},{"path":[]},{"path":"/reference/create_lavaan.html","id":"data-generation","dir":"Reference","previous_headings":"","what":"Data generation","title":"Create Lavaan Model Syntax for RICLPM Power Analysis — create_lavaan","text":"lavaan model syntax needs created data generation, user must provide values ICC, RI_cor, Phi, wSigma, Psi arguments. default, arguments set NULL, model syntax made parameter table, parameters estimated rather set.","code":""},{"path":"/reference/create_lavaan.html","id":"naming-conventions","dir":"Reference","previous_headings":"","what":"Naming conventions","title":"Create Lavaan Model Syntax for RICLPM Power Analysis — create_lavaan","text":"Details naming conventions can found \"Details\" section powRICLPM.","code":""},{"path":"/reference/names_powRICLPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter Names From `powRICLPM` Object — names_powRICLPM","title":"Parameter Names From `powRICLPM` Object — names_powRICLPM","text":"names_powRICLPM extracts names variables internally created powRICLPM package. Details naming conventions can found \"Details\" section powRICLPM.","code":""},{"path":"/reference/names_powRICLPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter Names From `powRICLPM` Object — names_powRICLPM","text":"","code":"names_powRICLPM(object)"},{"path":"/reference/names_powRICLPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter Names From `powRICLPM` Object — names_powRICLPM","text":"object `powRICLPM` object.","code":""},{"path":"/reference/names_powRICLPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter Names From `powRICLPM` Object — names_powRICLPM","text":"character vector names variables internally created powRICLPM package.","code":""},{"path":"/reference/names_powRICLPM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameter Names From `powRICLPM` Object — names_powRICLPM","text":"simulating power conditions varying number time points, different amounts parameters across conditions. default, function returns parameter names condition smallest number parameters, returned parameter names valid condition.","code":""},{"path":"/reference/names_powRICLPM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter Names From `powRICLPM` Object — names_powRICLPM","text":"","code":"# Define population parameters for lagged effects and within-component correlations Phi <- matrix(c(.4, .1, .2, .3), ncol = 2, byrow = TRUE) wSigma <- matrix(c(1, .3, .3, 1), ncol = 2, byrow = TRUE)  # Create powRICLPM object for à priori power analysis output <- powRICLPM(target_power = 0.5,                     search_lower = 300,                     search_upper = 600,                     search_step = 50,                     time_points = 3,                     ICC = 0.5,                     RI_cor = 0.3,                     Phi = Phi,                     wSigma = wSigma,                     reps = 50,                     seed = 123456)  # Get names of internally created parameters names_powRICLPM(output) #>  [1] \"RI_A~~RI_A\" \"RI_B~~RI_B\" \"RI_A~~RI_B\" \"wA2~wA1\"    \"wA2~wB1\"    #>  [6] \"wB2~wA1\"    \"wB2~wB1\"    \"wA3~wA2\"    \"wA3~wB2\"    \"wB3~wA2\"    #> [11] \"wB3~wB2\"    \"wA1~~wA1\"   \"wB1~~wB1\"   \"wA1~~wB1\"   \"wA2~~wA2\"   #> [16] \"wA3~~wA3\"   \"wB2~~wB2\"   \"wB3~~wB3\"   \"wA2~~wB2\"   \"wA3~~wB3\""},{"path":"/reference/plot_powRICLPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot `powRICLPM` Objects — plot_powRICLPM","title":"Plot `powRICLPM` Objects — plot_powRICLPM","text":"plot_powRICLPM visualizes results `powRICLPM` objects using ggplot2.","code":""},{"path":"/reference/plot_powRICLPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot `powRICLPM` Objects — plot_powRICLPM","text":"","code":"plot_powRICLPM(object, x, y, ..., wrap, parameter = NULL)"},{"path":"/reference/plot_powRICLPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot `powRICLPM` Objects — plot_powRICLPM","text":"object `powRICLPM` object. x character string denoting variable plotted x-axis: Must \"sample_size\", \"time_points\", \"ICC\". y character string denoting performance measure plotted y-axis. See \"Details\" list valid performance measures. ... Additional options parsed mapping `aes()`. wrap character string denoting variable facet plots . parameter character string denoting single variable interest. Use names_powRICLPM get overview parameter names `powRICLPM` object.","code":""},{"path":"/reference/plot_powRICLPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot `powRICLPM` Objects — plot_powRICLPM","text":"`ggplot2` object.","code":""},{"path":[]},{"path":"/reference/plot_powRICLPM.html","id":"performance-measures","dir":"Reference","previous_headings":"","what":"Performance measures","title":"Plot `powRICLPM` Objects — plot_powRICLPM","text":"powRICLPM() computes several performance measures can plotted condition. include: avg: Average parameter estimate. stdDev: Standard deviation estimates. SEAvg: Mean standard error. mse: Mean square error. acc: Accuracy, width confidence interval. cover: proportion times confidence interval captures true population value. pwr: proportion time **p**-value significance criterion.","code":""},{"path":"/reference/plot_powRICLPM.html","id":"recommendations","dir":"Reference","previous_headings":"","what":"Recommendations","title":"Plot `powRICLPM` Objects — plot_powRICLPM","text":"recommended include study design characteristics x-axis (e.g., sample size number repeated measures), facet wrap characteristics data (e.g., ICC, skewness, kurtosis). strategy emphasizes facets represent characteristics influence power, influenced researcher. words, facet wraps represent different \"worlds\", whereas factors x-axis can tweaked researchers reach desired level power.","code":""},{"path":[]},{"path":"/reference/powRICLPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Power Analysis for the RI-CLPM — powRICLPM","title":"Power Analysis for the RI-CLPM — powRICLPM","text":"powRICLPM() used perform Monte Carlo power analysis random intercept cross-lagged panel model (RI-CLPM). can *recommend sample size* given desired power level specific parameter, compute *performance measures* (e.g., bias, mean square error, etc.) parameters across experimental conditions. Conditions can change terms sample size, number time points, proportion -unit variance, skewness, kurtosis.","code":""},{"path":"/reference/powRICLPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power Analysis for the RI-CLPM — powRICLPM","text":"","code":"powRICLPM(   target_power,   search_lower = NULL,   search_upper = NULL,   search_step = 20,   sample_size = NULL,   time_points,   ICC,   RI_cor,   Phi,   wSigma,   skewness = 0,   kurtosis = 0,   alpha = 0.05,   reps,   seed = NA,   save_path = NA )"},{"path":"/reference/powRICLPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power Analysis for the RI-CLPM — powRICLPM","text":"target_power numeric value 0 1, denoting targeted power level. search_lower positive integer, denoting lower bound range sample sizes include power analysis. search_upper positive integer, denoting upper bound range sample sizes include power analysis. search_step positive integer, denoting increment sample sizes. sample_size integer (vector) elements least larger 20 (.e., number free parameters basic bivariate RI-CLPM 3 repeated measures), indicating sample sizes evaluate power. argument can specified alternative `search_` arguments denote specific sample sizes, rather entire range. time_points integer (vector) elements larger 3, indicating number time points. ICC numeric value denoting proportion variance -unit level. RI_cor numeric value denoting correlation random intercepts. Phi matrix standardized autoregressive cross-lagged effects population. Columns represent predictors rows represent outcomes. wSigma correlation matrix within-unit components. skewness numeric (vector) denoting skewness values observed variables. information, see simulateData. kurtosis numeric (vector) denoting kurtosis values observed variables. information, see simulateData. alpha numeric value denoting significance criterion. defaults 0.05. reps positive integer denoting number Monte Carlo replications used simulations. seed integer length 1. multiple cores used, seed length 1 used generate full L'Ecuyer-CMRG seed cores. information, see furrr_options. save_path character string naming directory save (data) files .","code":""},{"path":"/reference/powRICLPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power Analysis for the RI-CLPM — powRICLPM","text":"list containing \"conditions\" \"session\" element. \"condition\" element list, element list containing input (independent variables power analysis context) output (dependent variables) power analysis specific condition. includes: sample_size: sample size. time_points: number time points. ICC: proportion -unit variance. reps: Number replications. pop_synt: lavaan model syntax containing population values data generation. pop_tab: lavaan parameter table data generation. est_synt: lavaan model syntax estimation. est_tab: lavaan parameter table estimation. save_path: directory (data) files saved . results: Data frame containing power analysis results. errors: logical vector denoting failed Monte Carlo replications, not_converged: logical vector denoting non-converged Monte Carlo replications, inadmissible logical vector denoting Monte Carlo replications resulted negative variances non-positive definite matrices. \"session\" element list containing information common conditions, including sample_size: sample sizes interest. time_points: number time points interest. ICC: proportion -unit variance. reps: number Monte Carlo replication. target_power: desired power level.","code":""},{"path":[]},{"path":"/reference/powRICLPM.html","id":"data-generation","dir":"Reference","previous_headings":"","what":"Data generation","title":"Power Analysis for the RI-CLPM — powRICLPM","text":"Data generated using simulateData lavaan package. data generating model RI-CLPM variance 1 within-unit components, lagged effects (specified Phi argument) can interpreted standardized effects. implies process within-unit level must stationary Phi matrix subject stationarity constraints VAR(1) model (.e., eigenvalues smaller 1). Based specified Phi wSigma matrix, residual variances covariance within-unit components computed (see compute_Psi) wave 2 later.","code":""},{"path":"/reference/powRICLPM.html","id":"naming-conventions-for-observed-and-latent-variables","dir":"Reference","previous_headings":"","what":"Naming conventions for observed and latent variables","title":"Power Analysis for the RI-CLPM — powRICLPM","text":"observed variables RI-CLPM given default names, namely capital letters alphabetical order, numbers denoting measurement occasion. example, bivariate RICLPM 3 time points, observe A1, A2, A3, B1, B2, B3. within-components denoted wA1, wA2, ..., wB3, respectively. -components RI_ prepended variable name, resulting RI_A RI_B. Parameters denoted using lavaan model syntax. information, see https://lavaan.ugent./tutorial/syntax1.html. example, random intercept variances denoted RI_A~~RI_A RI_B~~RI_B, cross-lagged effects first wave wB2~wA1 wA2~wB1, autoregressive effects wA2~wA1 wB2~wB1. Use names_powRICLPM extract parameter names `powRICLPM` object.","code":""},{"path":"/reference/powRICLPM.html","id":"data-analysis","dir":"Reference","previous_headings":"","what":"Data analysis","title":"Power Analysis for the RI-CLPM — powRICLPM","text":"Data analyzed using lavaan. speed process, power analysis across different conditions can run parallel (implemented using furrr). information, see https://jeroendmulder.github.io/powRICLPM/parallel.html.","code":""},{"path":[]},{"path":"/reference/powRICLPM.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Power Analysis for the RI-CLPM — powRICLPM","text":"Jeroen D. Mulder j.d.mulder@uu.nl","code":""},{"path":"/reference/powRICLPM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power Analysis for the RI-CLPM — powRICLPM","text":"","code":"# Define population parameters for lagged effects and within-component correlations Phi <- matrix(c(.4, .1, .2, .3), ncol = 2, byrow = TRUE) wSigma <- matrix(c(1, .3, .3, 1), ncol = 2, byrow = TRUE)  # Option 1 - Get a sample size recommendation output1 <- powRICLPM(target_power = 0.8,                      search_lower = 500,                      search_upper = 600,                      search_step = 50,                      time_points = 3,                      ICC = 0.5,                      RI_cor = 0.3,                      Phi = Phi,                      wSigma = wSigma,                      reps = 30,                      seed = 123456)  # Option 2 - Get performance measures across 6 simulation conditions if (FALSE) { output2 <- powRICLPM(sample_size = 400,                      time_points = c(3, 4, 5),                      ICC = c(0.3, 0.7),                      RI_cor = 0.3,                      Phi = Phi,                      wSigma = wSigma,                      reps = 100,                      seed = 123456)                      }"},{"path":"/reference/powRICLPM_Mplus.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Mplus Syntax for RICLPM Power Analysis — powRICLPM_Mplus","title":"Create Mplus Syntax for RICLPM Power Analysis — powRICLPM_Mplus","text":"powRICLPM_Mplus() used create save Mplus model syntax specified RI-CLPM model performing Monte Carlo power analysis Mplus.","code":""},{"path":"/reference/powRICLPM_Mplus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Mplus Syntax for RICLPM Power Analysis — powRICLPM_Mplus","text":"","code":"powRICLPM_Mplus(   sample_size,   time_points,   ICC,   RI_cor,   Phi,   wSigma,   Psi = NULL,   reps = 1000,   seed = NULL,   save_path )"},{"path":"/reference/powRICLPM_Mplus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Mplus Syntax for RICLPM Power Analysis — powRICLPM_Mplus","text":"sample_size integer (vector) elements least larger 20 (.e., number free parameters basic bivariate RI-CLPM 3 repeated measures), indicating sample sizes evaluate power. argument can specified alternative `search_` arguments denote specific sample sizes, rather entire range. time_points integer (vector) elements larger 3, indicating number time points. ICC numeric value denoting proportion variance -unit level. RI_cor numeric value denoting correlation random intercepts. Phi matrix standardized autoregressive cross-lagged effects population. Columns represent predictors rows represent outcomes. wSigma correlation matrix within-unit components. Psi Variance-covariance matrix within-unit residuals wave 2 onwards. reps positive integer denoting number Monte Carlo replications used simulations. seed integer length 1. multiple cores used, seed length 1 used generate full L'Ecuyer-CMRG seed cores. information, see furrr_options. save_path character string naming directory save (data) files .","code":""},{"path":"/reference/powRICLPM_Mplus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Mplus Syntax for RICLPM Power Analysis — powRICLPM_Mplus","text":"character containing Mplus model syntax.","code":""},{"path":[]},{"path":"/reference/powRICLPM_Mplus.html","id":"syntax-generation","dir":"Reference","previous_headings":"","what":"Syntax generation","title":"Create Mplus Syntax for RICLPM Power Analysis — powRICLPM_Mplus","text":"Mplus model syntax created two steps: First, MODEL POPULATION command syntax created parameters constrained population values, second MODEL command syntax created model estimation. Ultimately, parameter tables pasted together form character vectors containing Mplus syntax exported.","code":""},{"path":"/reference/powRICLPM_Mplus.html","id":"naming-conventions","dir":"Reference","previous_headings":"","what":"Naming conventions","title":"Create Mplus Syntax for RICLPM Power Analysis — powRICLPM_Mplus","text":"Details naming conventions can found \"Details\" section powRICLPM.","code":""},{"path":"/reference/powRICLPM_Mplus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Mplus Syntax for RICLPM Power Analysis — powRICLPM_Mplus","text":"","code":"# Define population parameters for lagged effects and within-component correlations Phi <- matrix(c(.5, .1, .4, .5), ncol = 2, byrow = TRUE) wSigma <- matrix(c(1 , .3, .3, 1) , ncol = 2, byrow = TRUE) Psi <- compute_Psi(Phi = Phi, wSigma = wSigma)  # Create and save Mplus model syntax for Monte Carlo power analysis powRICLPM_Mplus(sample_size = 300,                 time_points = 3,                 ICC = 0.5,                 RI_cor = 0.3,                 Phi = Phi,                 wSigma = wSigma,                 reps = 10000,                 seed = 123456,                 save_path = \"./saved\") #> An Mplus input file for Monte Carlo Power Analysis for the RI-CLPM has been created: #>  - Directory: ./saved #>  - File: Mplus_N300T3.txt"},{"path":"/reference/run_condition.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Monte Carlo Simulation For Single Condition — run_condition","title":"Run Monte Carlo Simulation For Single Condition — run_condition","text":"run_condition() runs Monte Carlo simulation single given condition. generates data based pop_synt element \"object\", estimates RI-CLPM using est_synt element \"object\". Data generation model estimation done using lavaan.","code":""},{"path":"/reference/run_condition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Monte Carlo Simulation For Single Condition — run_condition","text":"","code":"run_condition(object, p)"},{"path":"/reference/run_condition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Monte Carlo Simulation For Single Condition — run_condition","text":"object list information running single simulation condition. See \"Details\" overview elements object must contain. p progressr object","code":""},{"path":"/reference/run_condition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Monte Carlo Simulation For Single Condition — run_condition","text":"list.","code":""},{"path":[]},{"path":"/reference/run_condition.html","id":"input-elements-in-object-","dir":"Reference","previous_headings":"","what":"Input: Elements in \"object\"","title":"Run Monte Carlo Simulation For Single Condition — run_condition","text":"successfully run Monte Carlo simulation, \"object\" arguments needs following elements: sample_size: sample size. time_points: number time points. reps: Number replications. pop_synt: lavaan model syntax containing population values data generation. pop_tab: lavaan parameter table data generation. est_synt: lavaan model syntax estimation. est_tab: lavaan parameter table estimation. skewness: skewness value(s) observed variables. kurtosis: kurtosis value(s) observed variables. alpha: significance criterion. save_path: Folder simulated data saved (optional).","code":""},{"path":"/reference/run_condition.html","id":"output","dir":"Reference","previous_headings":"","what":"Output","title":"Run Monte Carlo Simulation For Single Condition — run_condition","text":"function adds following elements \"object\": results: data frame containing results (.e., population values, bias, standard error estimate, coverage, power, etc.), errors: logical vector denoting failed Monte Carlo replications, not_converged: logical vector denoting non-converged Monte Carlo replications, inadmissible logical vector denoting Monte Carlo replications resulted negative variances non-positive definite matrices.","code":""}]
