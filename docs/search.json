[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Jeroen D. Mulder Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/apriori.html","id":"preparation","dir":"Articles","previous_headings":"","what":"Preparation","title":"À priori power analysis","text":"performing à priori power analysis, must determine simulation conditions population parameter values. Simulation conditions refer characteristics study design can impact statistical power. includes characteristics like sample size number repeated measures included study. must decide number repeated measures used simulations, range sample sizes simulate power. example, investigate power sample sizes 200 600 (incremental steps 50, resulting 9 conditions) RI-CLPM 3 repeated measures. Next, must determine population parameter values RI-CLPM. can based previous research, theory, expert knowledge. function requires specification : ICC: proportion variance -unit level (relative total variance). RI_cor: correlation random intercepts. Phi: Standardized autoregressive cross-lagged effects within-unit components model. wSigma: Correlations within-unit components. Details decide values population parameter values can found LINK NAAR PAPER. example, parameter values set :","code":"ICC <- 0.5 RI_cor <- 0.3 Phi <- matrix(c(.4, .1, .2, .3), ncol = 2, byrow = T) # The .2 refers to our standardized cross-lagged effect of interest wSigma <- matrix(c(1, .3, .3, 1), ncol = 2, byrow = T)"},{"path":"/articles/apriori.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"À priori power analysis","text":"perform à priori power analysis, use powRICLPM() function. must provide: desired power level using target_power argument, parameter interest parameter argument (see “Details” section help file powRICLPM details naming conventions used function), range sample sizes simulate power using search_lower, search_upper, search_step arguments, number time points simulated data using time_points argument, population values ICC, RI_cor, Phi, wSigma, number MCMC replications want perform per condition reps argument (larger values result reliable results, computationally intensive, especially simulating power large range sample sizes). example, specify: Optionally, can specify: cores: number cores use analysis. Executing analysis using multiple cores can significantly reduce computation time. seed: integer control starting point random number generator. important use want replicate results. save_path: directory (data) files written. Technical details implementation analysis can found LINK NAAR PAPER.","code":"output <- powRICLPM(target_power = 0.5,                     parameter = \"wB2~wA1\",                     search_lower = 200,                     search_upper = 600,                     search_step = 50,                     time_points = 3,                     ICC = ICC,                     RI_cor = RI_cor,                      Phi = Phi,                     wSigma = wSigma,                     reps = 30)"},{"path":"/articles/apriori.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"À priori power analysis","text":"Using powRICLPM() function creates list results, upon can call powRICLPM_summary() powRICLPM_plot() functions summarize visualize results analysis, respectively. powRICLPM_summary() displays textual summary console, including characteristics powRICLPM analysis minimally recommended sample size get desired power parameter interest. also suggests next steps, amongst validation preliminary recommendation visualization results. powRICLPM_plot() creates ggplot2 scatter plot simulated power range sample sizes. Use parameter argument display visualize power specific parameter.","code":""},{"path":"/articles/apriori.html","id":"whats-next","dir":"Articles","previous_headings":"","what":"What’s next?","title":"À priori power analysis","text":"results à priori power analysis usually based limited number MCMC replications (speed analysis), results might unreliable unlikely converged stable solution. Therefore, important rerun analysis specifically recommended sample size using sufficiently large number replications. considered “sufficiently large” depends exact analysis, practice researchers use least 1000 replications, preferably 10000. recommend validate results refer post hoc analysis leads simulation output (bias, average standard error, etc.). information can found ….","code":""},{"path":"/articles/mplus.html","id":"preparation","dir":"Articles","previous_headings":"","what":"Preparation","title":"Power analysis using Mplus","text":"performing post hoc power analysis, must carefully determine population parameter values, values impact validity power analysis. Therefore, recommended base parameter values previous research, theory, expert knowledge. Specifically, post hoc analysis function requires specification : ICC: proportion variance -unit level (relative total variance). RI_cor: correlation random intercepts. Phi: Standardized autoregressive cross-lagged effects within-unit components model. wSigma: Correlations within-unit components. Details decide values population parameter values can found LINK NAAR MIJN PAPER. example, parameter values set :","code":"ICC <- 0.5 RI_cor <- 0.3 Phi <- matrix(c(.4, .1, .2, .3), ncol = 2, byrow = T) # The .2 refers to our standardized cross-lagged effect of interest wSigma <- matrix(c(1, .3, .3, 1), ncol = 2, byrow = T)"},{"path":"/articles/mplus.html","id":"create-mplus-syntax","dir":"Articles","previous_headings":"","what":"Create Mplus syntax","title":"Power analysis using Mplus","text":"Mplus syntax, use powRICLPM_Mplus() function. must provide: sample sizes number time points sample_size time_points arguments respectively, population values ICC, RI_cor, Phi, wSigma, number MCMC replications want perform per condition reps argument, seed control starting point random number generator, save_path, denoting directory save Mplus input file . example, specify: powRICLPM_Mplus() creates Mplus input file (.txt file) writes specified directory. file contains Mplus model syntax needed run power analysis RI-CLPM Mplus. information Monte Carlo simulations Mplus can found http://statmodel.com/download/usersguide/Chapter12.pdf.","code":"powRICLPM_Mplus(sample_size = 250,                 time_points = 4,                 ICC = 0.5,                 RI_cor = 0.3,                 Phi = Phi,                 wSigma = wSigma,                 reps = 10000,                 seed = 123456,                 save_path = \"./saved\")"},{"path":"/articles/posthoc.html","id":"preparation","dir":"Articles","previous_headings":"","what":"Preparation","title":"Post hoc power analysis","text":"performing post hoc power analysis, must carefully determine population parameter values, values impact validity power analysis. Therefore, recommended base parameter values previous research, theory, expert knowledge. Specifically, post hoc analysis function requires specification : ICC: proportion variance -unit level (relative total variance). RI_cor: correlation random intercepts. Phi: Standardized autoregressive cross-lagged effects within-unit components model. wSigma: Correlations within-unit components. Details decide values population parameter values can found LINK NAAR PAPER. example, parameter values set :","code":"ICC <- 0.5 RI_cor <- 0.3 Phi <- matrix(c(.4, .1, .2, .3), ncol = 2, byrow = T) # The .2 refers to our standardized cross-lagged effect of interest wSigma <- matrix(c(1, .3, .3, 1), ncol = 2, byrow = T)"},{"path":"/articles/posthoc.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"Post hoc power analysis","text":"perform post hoc power analysis, use powRICLPM() function. must provide: sample sizes number time points sample_size time_points arguments respectively, population values ICC, RI_cor, Phi, wSigma, number MCMC replications want perform per condition reps argument. example, specify: Optionally, can specify: cores: number cores use analysis. Executing analysis using multiple cores can significantly reduce computation time. seed: integer control starting point random number generator. important use want replicate results. save_path: directory (data) files written. Technical details implementation analysis can found LINK NAAR PAPER.","code":"output <- powRICLPM(sample_size = c(400, 450, 500)                     time_points = c(3, 4),                     ICC = ICC,                     RI_cor = RI_cor,                      Phi = Phi,                     wSigma = wSigma,                     reps = 1000)"},{"path":"/articles/posthoc.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"Post hoc power analysis","text":"Using powRICLPM() function creates list results, upon can call powRICLPM_summary() powRICLPM_plot() functions summarize visualize results analysis, respectively. powRICLPM_summary() displays textual summary console, including general characteristics post hoc power analysis. obtain detailed simulation results specific parameter, including bias, standard deviation estimates, average standard error, mean square error, proportion times 95% confidence interval contained population parameter values, can specify parameter interest parameter argument. example: powRICLPM_plot() creates ggplot2 scatter plot simulated power range sample sizes, different lines conditions different numbers time points. must provided parameter argument specify parameter display results.","code":"summary(output, parameter = \"wB2~wA1\") summary(output, parameter = \"wA1~wA2\") # Results in an error as the parameter name is invalid"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeroen Mulder. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mulder J (2022). powRICLPM: Power analysis random intercept cross-lagged panel model. R package version 0.1.0, http://jeroen.d.mulder.github.io/powRICLPM.","code":"@Manual{,   title = {powRICLPM: Power analysis for the random intercept cross-lagged panel model},   author = {Jeroen Mulder},   year = {2022},   note = {R package version 0.1.0},   url = {http://jeroen.d.mulder.github.io/powRICLPM}, }"},{"path":"/index.html","id":"powriclpm","dir":"","previous_headings":"","what":"Power analysis for the random intercept cross-lagged panel model","title":"Power analysis for the random intercept cross-lagged panel model","text":"powRICLPM R package performs power analysis random intercept cross-lagged panel model (RI-CLPM) simple use-friendly way. three main functionalities: Perform à priori power analysis get preliminary sample size recommendation detecting effect interest desired power level. Perform post hoc power analysis investigate performance RI-CLPM (w.r.t. parameter interest) various conditions (.e., various sample sizes number repeated measures). Create Mplus syntax performing power analysis RI-CLPM using Mplus. User guides functionalities can found vignettes ‘Articles’ tab. Technical details implementation power analysis can found LINK NAAR PAPER.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Power analysis for the random intercept cross-lagged panel model","text":"can install development version powRICLPM GitHub :","code":"install.packages(\"devtools\") devtools::install_github(\"jeroendmulder/powRICLPM\")"},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Power analysis for the random intercept cross-lagged panel model","text":"Every user-facing function package documented, documentation can accessed running ?function_name R console, e.g., ?powRICLPM. Furthermore, three main vignettes (accessable via ‘Articles’ tab), describing three main functionalities package, described .","code":""},{"path":"/index.html","id":"citing-powriclpm","dir":"","previous_headings":"","what":"Citing powRICLPM","title":"Power analysis for the random intercept cross-lagged panel model","text":"can cite R-package following citation: Mulder, J.D., (n.d.). Performing power analysis RI-CLPM","code":""},{"path":"/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Power analysis for the random intercept cross-lagged panel model","text":"ideas, comments, issues like raise, please get touch. Issues idea can raised GitHub via https://github.com/jeroendmulder/powRICLPM Pull request can raised GitHub via https://github.com/jeroendmulder/powRICLPM/pulls","code":""},{"path":"/reference/compute_Psi.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Residual Variances of Lagged Within-Components — compute_Psi","title":"Compute Residual Variances of Lagged Within-Components — compute_Psi","text":"Within RI-CLPM context, function computes variance-covariance matrix within-unit residuals wave 2 later, given lagged effects Phi observed variance-covariance matrix Sigma.","code":""},{"path":"/reference/compute_Psi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Residual Variances of Lagged Within-Components — compute_Psi","text":"","code":"compute_Psi(Phi, wSigma)"},{"path":"/reference/compute_Psi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Residual Variances of Lagged Within-Components — compute_Psi","text":"Phi matrix standardized autoregressive cross-lagged effects population. Columns represent predictors rows represent outcomes. wSigma correlation matrix within-unit components.","code":""},{"path":"/reference/compute_Psi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Residual Variances of Lagged Within-Components — compute_Psi","text":"variance-covariance matrix within-unit residuals wave 2 later.","code":""},{"path":"/reference/compute_Psi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Residual Variances of Lagged Within-Components — compute_Psi","text":"function based Equation (3.26) Kim Nelson (1999, p. 27).","code":""},{"path":"/reference/create_lavaan.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Lavaan Model Syntax for RICLPM Power Analysis — create_lavaan","title":"Create Lavaan Model Syntax for RICLPM Power Analysis — create_lavaan","text":"Creates lavaan parameter table model syntax specified model.","code":""},{"path":"/reference/create_lavaan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Lavaan Model Syntax for RICLPM Power Analysis — create_lavaan","text":"","code":"create_lavaan(   time_points,   ICC = NULL,   RI_cor = NULL,   Phi = NULL,   wSigma = NULL,   Psi = NULL,   syntax = FALSE )"},{"path":"/reference/create_lavaan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Lavaan Model Syntax for RICLPM Power Analysis — create_lavaan","text":"time_points integer integer vector elements larger 3, indicating number time points. ICC numeric value denoting proportion variance -unit level. RI_cor numeric value denoting correlation random intercepts. Phi matrix standardized autoregressive cross-lagged effects population. Columns represent predictors rows represent outcomes. wSigma correlation matrix within-unit components. Psi Variance-covariance matrix within-unit residuals wave 2 onwards. syntax Logical indicating whether model syntax created.","code":""},{"path":"/reference/create_lavaan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Lavaan Model Syntax for RICLPM Power Analysis — create_lavaan","text":"data frame containing model parameters (parameter elements characters).","code":""},{"path":"/reference/create_lavaan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Lavaan Model Syntax for RICLPM Power Analysis — create_lavaan","text":"lavaan model syntax needs created data generation, user must provide values ICC, RI_cor, Phi, wSigma, Psi arguments. default, arguments set NULL, model syntax made parameter table, parameters estimated rather set. Details naming conventions can found \"Details\" section powRICLPM.","code":""},{"path":[]},{"path":[]},{"path":"/reference/powRICLPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Power Analysis for the RI-CLPM — powRICLPM","title":"Perform Power Analysis for the RI-CLPM — powRICLPM","text":"powRICLPM() used perform Monte Carlo power analysis random intercept cross-lagged panel model (RICLPM). three main functionalities: 1) Recommend sample size desired power level specific parameter (.e., à priori analysis), 2) simulate power conditions varying sample sizes number time points (.e., post hoc analysis), 3) create Mplus model syntax performing power analysis Mplus.","code":""},{"path":"/reference/powRICLPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Power Analysis for the RI-CLPM — powRICLPM","text":"","code":"powRICLPM(   target_power = NULL,   parameter = NULL,   search_lower = NULL,   search_upper = NULL,   search_step = NULL,   sample_size = NULL,   time_points,   ICC,   RI_cor,   Phi,   wSigma,   reps,   cores = NULL,   seed = NULL,   save_path = NA )"},{"path":"/reference/powRICLPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Power Analysis for the RI-CLPM — powRICLPM","text":"target_power numeric value 0 1, denoting desired power level recommend sample size. Use à priori analyses. parameter character string denoting parameter compute recommended sample size. Use à priori analysis. See \"Details\" naming defaults parameters used package. search_lower positive integer, denoting lower bound range sample sizes simulate power. Use à priori analysis. search_upper positive integer, denoting upper bound range sample sizes simulate power. Use à priori analysis. search_step positive integer, denoting increment sample sizes. Use à priori analysis. sample_size integer integer vector elements larger 1, indicating sample sizes evaluate power. Use post hoc analysis. time_points integer integer vector elements larger 3, indicating number time points. ICC numeric value denoting proportion variance -unit level. RI_cor numeric value denoting correlation random intercepts. Phi matrix standardized autoregressive cross-lagged effects population. Columns represent predictors rows represent outcomes. wSigma correlation matrix within-unit components. reps positive integer denoting number Monte Carlo replications used simulations. cores positive integer denoting number cores use Monte Carlo simulations. Executing analysis using multiple cores can significantly reduce computation time. seed integer length 1. multiple cores used, seed length 1 used generate full L'Ecuyer-CMRG seed cores. information, see furrr_options. save_path character string naming directory save (data) files .","code":""},{"path":"/reference/powRICLPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Power Analysis for the RI-CLPM — powRICLPM","text":"list containing \"conditions\" \"session\" element. \"condition\" element list, element list containing elements needed run power analysis specific condition. includes: sample_size: sample size. time_points: number time points. ICC: proportion -unit variance. reps: Number replications. pop_synt: lavaan model syntax containing population values data generation. pop_tab: lavaan parameter table data generation. est_synt: lavaan model syntax estimation. est_tab: lavaan parameter table estimation. save_path: directory (data) files saved . results: Data frame containing power analysis results. fails: Logical vector indicating failed MCMC reps. \"session\" element list containing information common conditions. à priori analyses, includes: type: type power analysis performed. target_power: desired power level. parameter: parameter interest. search_lower: lower bound set candidate sample sizes. search_upper: upper bound set candidate sample sizes. search_step: increment sample sizes. reps: number Monte Carlo replication. post hoc analyses, includes: type: type power analysis performed. sample_size: sample sizes interest. time_points: number time points interest. ICC: proportion -unit variance. reps: number Monte Carlo replication.","code":""},{"path":"/reference/powRICLPM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform Power Analysis for the RI-CLPM — powRICLPM","text":"Data generated RICLPM variance 1 within-unit components, lagged effects (specified Phi argument) can interpreted standardized effects. implies process within-unit level must stationary Phi matrix subject stationarity constraints VAR(1) model (.e., eigenvalues smaller 1). Based specified Phi wSigma matrix, residual variances covariance within-unit components computed (see compute_Psi) wave 2 later. variables RICLPM given default names, namely capital letters alphabetical order, numbers denoting measurement occasion. example, bivariate RICLPM 3 time points, A1, A2, A3, B1, B2, B3 observed variables. within-components denoted wA1, wA2, ..., wB3, respectively. components RI_ prepended variable name, resulting RI_A RI_B. Parameters denoted using lavaan model syntax. information, see https://lavaan.ugent./tutorial/syntax1.html. example, random intercepts denoted RI_A~~RI_B, cross-lagged effects first wave wB2~wA1 wA2~wB1, autoregressive effects wA2~wA1 wB2~wB1. Data generated analyzed using lavaan. speed process, power analysis different conditions can run parallel (implemented using furrr).","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"/reference/powRICLPM.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Perform Power Analysis for the RI-CLPM — powRICLPM","text":"Jeroen D. Mulder j.d.mulder@uu.nl","code":""},{"path":"/reference/powRICLPM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Power Analysis for the RI-CLPM — powRICLPM","text":"","code":"# Define population parameters for lagged effects and within-component correlations Phi <- matrix(c(.4, .1, .2, .3), ncol = 2, byrow = TRUE) wSigma <- matrix(c(1, .3, .3, 1), ncol = 2, byrow = TRUE)  # Option 1 - À priori power analysis output1 <- powRICLPM(target_power = 0.5,                      parameter = \"wB2~wA1\",                      search_lower = 500,                      search_upper = 600,                      search_step = 50,                      time_points = 3,                      ICC = 0.5,                      RI_cor = 0.3,                      Phi = Phi,                      wSigma = wSigma,                      reps = 30,                      cores = 1,                      seed = 123456) #>  #> A priori powRICLPM-analysis completed: #>  - Monte Carlo replications:  30 #>  - Target power:  0.5 #>  - Preliminary recommended sample size:  500 #>  - Number of non-converged replications for recommended run:  0 #>  - Number of replications with inadmissible estimates for recommended run:  0 #>  #> Sugested next steps: #>  - Use powRICLPM_plot() to visualize preliminary results for entire range of sample sizes. #>  - Rerun powRICLPM with the recommended sample size and large number of replications to validate preliminary results.  # Option 2 - Post hoc power analysis output2 <- powRICLPM(sample_size = c(250, 350, 400),                      time_points = c(3, 4),                      ICC = 0.5,                      RI_cor = 0.3,                      Phi = Phi,                      wSigma = wSigma,                      reps = 100,                      cores = 1,                      seed = 123456) #>  #> Post hoc powRICLPM-analysis completed: #>  - Monte Carlo replications:  100 #>  - Proportion random intercept variance: 0.5 #>  - Sample sizes (min. - max.): 250 - 400 #>  - Time points (min. - max.): 3 - 4 #>  #> Suggestions: #>  - Specify the `parameter` argument in the powRICLPM_summary() function to obtain detailed results for a specific parameter. #>  - Use powRICLPM_plot() to visualize the power across all conditions."},{"path":"/reference/powRICLPM_Mplus.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Mplus Syntax for RICLPM Power Analysis — powRICLPM_Mplus","title":"Create Mplus Syntax for RICLPM Power Analysis — powRICLPM_Mplus","text":"powRICLPM_Mplus() used create save Mplus model syntax specified RI-CLPM model performing Monte Carlo power analysis Mplus.","code":""},{"path":"/reference/powRICLPM_Mplus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Mplus Syntax for RICLPM Power Analysis — powRICLPM_Mplus","text":"","code":"powRICLPM_Mplus(   sample_size,   time_points,   ICC,   RI_cor,   Phi,   wSigma,   Psi = NULL,   reps = 1000,   seed = NULL,   save_path )"},{"path":"/reference/powRICLPM_Mplus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Mplus Syntax for RICLPM Power Analysis — powRICLPM_Mplus","text":"sample_size integer integer vector elements larger 1, indicating sample sizes evaluate power. Use post hoc analysis. time_points integer integer vector elements larger 3, indicating number time points. ICC numeric value denoting proportion variance -unit level. RI_cor numeric value denoting correlation random intercepts. Phi matrix standardized autoregressive cross-lagged effects population. Columns represent predictors rows represent outcomes. wSigma correlation matrix within-unit components. Psi Variance-covariance matrix within-unit residuals wave 2 onwards. reps positive integer denoting number Monte Carlo replications used simulations. seed integer length 1. multiple cores used, seed length 1 used generate full L'Ecuyer-CMRG seed cores. information, see furrr_options. save_path character string naming directory save (data) files .","code":""},{"path":"/reference/powRICLPM_Mplus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Mplus Syntax for RICLPM Power Analysis — powRICLPM_Mplus","text":"character containing Mplus model syntax.","code":""},{"path":"/reference/powRICLPM_Mplus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Mplus Syntax for RICLPM Power Analysis — powRICLPM_Mplus","text":"Mplus model syntax created two steps: First, MODEL POPULATION command syntax created parameters constrained population values, second MODEL command syntax created model estimation. Ultimately, parameter tables pasted together form character vectors containing Mplus syntax exported. Details naming conventions can found \"Details\" section powRICLPM.","code":""},{"path":[]},{"path":[]},{"path":"/reference/powRICLPM_Mplus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Mplus Syntax for RICLPM Power Analysis — powRICLPM_Mplus","text":"","code":"# Define population parameters for lagged effects and within-component correlations Phi <- matrix(c(.5, .1, .4, .5), ncol = 2, byrow = TRUE) wSigma <- matrix(c(1 , .3, .3, 1) , ncol = 2, byrow = TRUE) Psi <- compute_Psi(Phi = Phi, wSigma = wSigma)  # Create and save Mplus model syntax for Monte Carlo power analysis powRICLPM_Mplus(sample_size = 300,                 time_points = 3,                 ICC = 0.5,                 RI_cor = 0.3,                 Phi = Phi,                 wSigma = wSigma,                 reps = 10000,                 seed = 123456,                 save_path = \"./saved\") #> An Mplus input file for Monte Carlo Power Analysis for the RI-CLPM has been created: #>  - Directory: ./saved #>  - File: Mplus_N300T3.txt"},{"path":"/reference/powRICLPM_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Parameter Names From ","title":"Get Parameter Names From ","text":"powRICLPM_names gets names variables internally created powRICLPM package. Details naming conventions can found \"Details\" section powRICLPM.","code":""},{"path":"/reference/powRICLPM_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Parameter Names From ","text":"","code":"powRICLPM_names(x, max_set = FALSE)"},{"path":"/reference/powRICLPM_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Parameter Names From ","text":"x powRICLPM object. max_set logical indicating parameter names condition largest number parameters returned. simulating power conditions varying number time points, different numbers parameters conditions. default, function returns parameter names condition smallest number parameters, returned parameter names valid condition.","code":""},{"path":"/reference/powRICLPM_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Parameter Names From ","text":"character vector names variables internally created powRICLPM package.","code":""},{"path":[]},{"path":"/reference/powRICLPM_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Parameter Names From ","text":"","code":"# Define population parameters for lagged effects and within-component correlations Phi <- matrix(c(.4, .1, .2, .3), ncol = 2, byrow = TRUE) wSigma <- matrix(c(1, .3, .3, 1), ncol = 2, byrow = TRUE)  # Create powRICLPM object for à priori power analysis output <- powRICLPM(target_power = 0.5,                      parameter = \"wB2~wA1\",                      search_lower = 300,                      search_upper = 600,                      search_step = 50,                      time_points = 3,                      ICC = 0.5,                      RI_cor = 0.3,                      Phi = Phi,                      wSigma = wSigma,                      reps = 50,                      cores = 1,                      seed = 123456) #>  #> A priori powRICLPM-analysis completed: #>  - Monte Carlo replications:  50 #>  - Target power:  0.5 #>  - Preliminary recommended sample size:  400 #>  - Number of non-converged replications for recommended run:  0 #>  - Number of replications with inadmissible estimates for recommended run:  0 #>  #> Sugested next steps: #>  - Use powRICLPM_plot() to visualize preliminary results for entire range of sample sizes. #>  - Rerun powRICLPM with the recommended sample size and large number of replications to validate preliminary results.  # Get names of internally created parameters powRICLPM_names(output) #>  [1] \"RI_A~~RI_A\" \"RI_B~~RI_B\" \"RI_A~~RI_B\" \"wA2~wA1\"    \"wA2~wB1\"    #>  [6] \"wB2~wA1\"    \"wB2~wB1\"    \"wA3~wA2\"    \"wA3~wB2\"    \"wB3~wA2\"    #> [11] \"wB3~wB2\"    \"wA1~~wA1\"   \"wB1~~wB1\"   \"wA1~~wB1\"   \"wA2~~wA2\"   #> [16] \"wA3~~wA3\"   \"wB2~~wB2\"   \"wB3~~wB3\"   \"wA2~~wB2\"   \"wA3~~wB3\""},{"path":"/reference/powRICLPM_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot powRICLPM Objects — powRICLPM_plot","title":"Plot powRICLPM Objects — powRICLPM_plot","text":"Plotting method powRICLPM objects. function visualizes results à priori post hoc powRICLPM analyses.","code":""},{"path":"/reference/powRICLPM_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot powRICLPM Objects — powRICLPM_plot","text":"","code":"powRICLPM_plot(x, y = NULL, parameter = NULL)"},{"path":"/reference/powRICLPM_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot powRICLPM Objects — powRICLPM_plot","text":"x powRICLPM object. y Phantom argument influence plot produced. Included make generic plot() method objects class powRICLPM. parameter character string denoting single variable interest. Use powRICLPM_names get overview valid parameter names powRICLPM object.","code":""},{"path":"/reference/powRICLPM_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot powRICLPM Objects — powRICLPM_plot","text":"","code":"# Define population parameters for lagged effects and within-component correlations Phi <- matrix(c(.4, .1, .2, .3), ncol = 2, byrow = TRUE) wSigma <- matrix(c(1, .3, .3, 1), ncol = 2, byrow = TRUE)  # Create powRICLPM object for à priori power analysis output <- powRICLPM(target_power = 0.5,                      parameter = \"wB2~wA1\",                      search_lower = 300,                      search_upper = 600,                      search_step = 50,                      time_points = 3,                      ICC = 0.5,                      RI_cor = 0.3,                      Phi = Phi,                      wSigma = wSigma,                      reps = 50,                      cores = 1,                      seed = 123456) #>  #> A priori powRICLPM-analysis completed: #>  - Monte Carlo replications:  50 #>  - Target power:  0.5 #>  - Preliminary recommended sample size:  400 #>  - Number of non-converged replications for recommended run:  0 #>  - Number of replications with inadmissible estimates for recommended run:  0 #>  #> Sugested next steps: #>  - Use powRICLPM_plot() to visualize preliminary results for entire range of sample sizes. #>  - Rerun powRICLPM with the recommended sample size and large number of replications to validate preliminary results.  # Visualize results powRICLPM_plot(output, parameter = \"wB2~wA1\")"},{"path":"/reference/powRICLPM_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"powRICLPM Power Analysis Summary — powRICLPM_summary","title":"powRICLPM Power Analysis Summary — powRICLPM_summary","text":"powRICLPM_summary() method class powRICLPM, summarizing results à priori post hoc powRICLPM simulation study.","code":""},{"path":"/reference/powRICLPM_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"powRICLPM Power Analysis Summary — powRICLPM_summary","text":"","code":"powRICLPM_summary(object, ..., parameter = NULL)"},{"path":"/reference/powRICLPM_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"powRICLPM Power Analysis Summary — powRICLPM_summary","text":"object powRICLPM object. ... Phantom argument influence summary produced. parameter character string denoting single variable interest. Use powRICLPM_names get overview valid parameter names powRICLPM object.","code":""},{"path":[]},{"path":"/reference/powRICLPM_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"powRICLPM Power Analysis Summary — powRICLPM_summary","text":"","code":"# Define population parameters for lagged effects and within-component correlations Phi <- matrix(c(.4, .1, .2, .3), ncol = 2, byrow = TRUE) wSigma <- matrix(c(1, .3, .3, 1), ncol = 2, byrow = TRUE)  # Create powRICLPM object for à priori power analysis output <- powRICLPM(target_power = 0.5,                      parameter = \"wB2~wA1\",                      search_lower = 300,                      search_upper = 600,                      search_step = 50,                      time_points = 3,                      ICC = 0.5,                      RI_cor = 0.3,                      Phi = Phi,                      wSigma = wSigma,                      reps = 50,                      cores = 1,                      seed = 123456) #>  #> A priori powRICLPM-analysis completed: #>  - Monte Carlo replications:  50 #>  - Target power:  0.5 #>  - Preliminary recommended sample size:  400 #>  - Number of non-converged replications for recommended run:  0 #>  - Number of replications with inadmissible estimates for recommended run:  0 #>  #> Sugested next steps: #>  - Use powRICLPM_plot() to visualize preliminary results for entire range of sample sizes. #>  - Rerun powRICLPM with the recommended sample size and large number of replications to validate preliminary results.  # Summarize results powRICLPM_summary(output, parameter = \"wB2~wA1\") #>  #> A priori powRICLPM-analysis completed: #>  - Monte Carlo replications:  50 #>  - Target power:  0.5 #>  - Preliminary recommended sample size:  400 #>  - Number of non-converged replications for recommended run:  0 #>  - Number of replications with inadmissible estimates for recommended run:  0 #>  #> Sugested next steps: #>  - Use powRICLPM_plot() to visualize preliminary results for entire range of sample sizes. #>  - Rerun powRICLPM with the recommended sample size and large number of replications to validate preliminary results."},{"path":"/reference/run_condition.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Monte Carlo Simulation For Single Condition — run_condition","title":"Run Monte Carlo Simulation For Single Condition — run_condition","text":"function runs Monte Carlo simulation given condition. generates data based pop_synt element \"object\", estimates RI-CLPM using est_synt element \"object\". Data generation model estimation done using lavaan.","code":""},{"path":"/reference/run_condition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Monte Carlo Simulation For Single Condition — run_condition","text":"","code":"run_condition(object)"},{"path":"/reference/run_condition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Monte Carlo Simulation For Single Condition — run_condition","text":"object list information running single simulation condition. See \"Details\" overview elements object must contain.","code":""},{"path":"/reference/run_condition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Monte Carlo Simulation For Single Condition — run_condition","text":"list.","code":""},{"path":"/reference/run_condition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Monte Carlo Simulation For Single Condition — run_condition","text":"successfully run Monte Carlo simulation, \"object\" arguments needs following elements: sample_size: sample size. time_points: number time points. reps: Number replications. save_path: directory save (data) files . pop_synt: lavaan model syntax containing population values data generation. pop_tab: lavaan parameter table data generation. est_synt: lavaan model syntax estimation. est_tab: lavaan parameter table estimation. function adds following two elements \"object\": results: data frame containing results (.e., population values, bias, standard error estimate, 95 errors: logical vector denoting failed Monte Carlo replications, not_converged: logical vector denoting non-converged Monte Carlo replications, inadmissible logical vector denoting Monte Carlo replications resulted negative variances non-positive definite matrices. function option save generated datasets.","code":""},{"path":[]},{"path":[]},{"path":[]}]
